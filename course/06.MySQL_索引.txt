MySQL 索引
	
	定义：
		对数据库表的一列或多列的值进行排序的一种结构(Btree方式)
	优点：
		加快数据检索速度
	缺点：
		1. 需要占用物理存储空间
		2. 当对表中数据更新时，索引需要动态维护，降低数据维护速度
	语法：
		>>> create index 索引名 on 表名(字段名);

	开启运行时间检测：
		>>> show variables like 'profiling';		# 查看状态
		>>> set profiling=1;						# 开启运行时间检测
		>>> show profiles;							# 查看执行时间
		>>> set profiling=0;						# 关闭运行时间检测
	示例：
		>>> set profiling=1;						# 开启运行时间检测
		>>> select name from t1 
			where name='lucy99999';					# 执行查询
		>>> show profiles;							# 查看执行时间
		>>> create index name on t1(name);			# 创建索引
		>>> select name from t1 
			where name='lucy99999';					# 再次执行查询
		>>> show profiles;							# 再次查看执行时间
	
	分类(根据所带索引约束条件不同)：
		普通索引(index)
			使用规则：
				1. 可设置多个字段
				2. 字段值无约束
				3. Key标志可以为MUL(普通索引标志)
			创建索引：
				1. 创建表时，同时创建
					>>> create table 表名(...
						index(字段名1),index(字段名2),...);
				2. 在已有表中创建
					>>> create index 索引名 on 表名(字段名);
			查看索引：
				>>> desc 表名; 	--> Key标志为：MUL
				>>> show index from 表名;		
				>>> show index from 表名\G;		# 查看详细信息
			删除索引：
				>>> drop index 索引名 on 表名;

		唯一索引(unique)
			使用规则：
				1. 可以设置多个字段
				2. 约束，字段值不允许重复，但是可为NULL
				3. Key标志：UNI
			创建索引：
				1. 创建表时，同时创建
					>>> create table 表名(...
						unique(字段名),unique(字段名),...)
				2. 在已有表中创建
					>>> create unique index 索引名 on 表名(字段名);
			查看与删除同上

		主键索引(primary key)
			自增长属性(auto_increment),配合主键一起使用
			使用规则：
				1. 只能有一个主键字段
				2. 约束，不允许重复，且不能为NULL
				3. Key标志：PRI
				4. 通常设置记录编号字段id,能唯一锁定一条记录
			创建主键：
				1. 创建表时，同时创建
					>>> create table 表名(
						id int primary key auto_increment,
						...)auto_increment=10000; 	# 设置自增长起始值
					>>> alter table 表名 auto_increment=10000;	# 在已有表中可以任意设置更改自增长起始值
				2. 在已有表中添加
					>>> alter table 表名 add primary key(id);	# 符合主键使用规则
					>>> alter table 表名 modify id int auto_increment	# 在已有表中添加自增长属性
			删除主键：
				删除自增长属性(modify)
					>>> alter table 表名 modify id int;
				删除主键索引
					>>> alter table 表名 drop primary key;

		外键索引(foreign key)(>= 2张表)
			作用：
				让当前表字段的值在另一个表的范围内选择
			创建语法：
				constraint 外键名
				foreign key(参考字段名)
				references 主表(被参考字段名)
				on delete 级联动作
				on update 级联动作
			使用规则：
				1. 主表、从表字段数据类型要一致
				2. 主表被参考字段：一般为主键（唯一索引也可以）
			
			示例：
				表1(主表). 缴费信息表(财务)
			      id  姓名    班级   缴费金额
			       1  唐伯虎  AID06     300
			       2  点秋香  AID06     260
			       3  祝枝山  AID06     250
				>>> create table jftab(
					id int primary key,
					name varchar(15),
					class char(5),
					money int
					);
				>>> insert into jftab values
					(1,'唐伯虎','AID06',300),
					(2,'点秋香','AID06',260),
					(3,'祝枝山','AID06',250);

			    表2(从表). 学生信息表(班主任)
			      id   姓名   缴费金额
			       1   唐伯虎   300
			       2   点秋香   260
			       3 XXXXXXXXXXXXXXXXX
			    >>> create table bjtab(
			    	stu_id int,
			    	name varchar(15),
			    	money int,
			    	foreign key(stu_id)
			    	references jftab(id)
			    	on delete cascade
			    	on update casdate
			    	);
			    >>> insert into bjtab values
			    	(1,'唐伯虎',300),
			    	(2,'点秋香',260),
			    	(3,'祝枝山',250);
			    # 做一下操作：
			    >>> insert into bjtab values
			    	(4,'文征明',310);							# 此时报错，外键级联，不允许添加主表以外信息
			    >>> delete from jftab where name='祝枝山';		# 此时bjtab中的‘祝枝山’信息同样被删除
			    >>> update jftab set id=6 where name='点秋香';	# 此时bjtab中的’点秋香‘信息同样被更改
			
			删除外键：
				>>> alter table 表名 drop foreign key[外键名];	# 删除外键名
				>>> show create table 表名;						# 查看外键名
				注：constraint(约束):'bjtab_ibfk_1'				# constraint显示外键名
			
			级联动作：
				1. cascade 级联更新
					数据级联删除、更新(只更新外键参考字段)
				2. restrict(默认)
					从表有相关联记录，不允许主表操作
				3. set null
					主表删除、更新，从表相关联记录字段值为NULL

			在已有表中添加外键
				>>> alter table 表名 add
					foreign key (参考字段) references 主表名(被参考字段)
					on delete ...
					on update ...
